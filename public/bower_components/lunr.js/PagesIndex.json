[{"title":"Creating a new theme","tags":["hugo","golang","jekyll"],"href":"/2016/01/01/creating-a-new-theme","content":" Overview Hugo is a static HTML and CSS website generator written in Go It is optimized for speed easy use and configurability Hugo takes a directory with content and templates and renders them into a full HTML website Hugo relies on Markdown files with front matter for meta data And you can run Hugo from any directory This works well for shared hosts and other systems where you dont have a privileged account Hugo renders a typical website of moderate size in a fraction of a second A good rule of thumb is that each piece of content renders in around 1 millisecond Hugo is designed to work well for any kind of website including blogs tumbles and docs Supported Architectures Currently we provide prebuilt Hugo binaries for Windows Linux FreeBSD NetBSD and OSnbspX Darwin for x64 i386 and ARM architectures Hugo may also be compiled from source wherever the Go compiler tool chain can run eg for other operating systems including DragonFly BSD OpenBSD Plannbsp9 and Solaris Complete documentation is available at Hugo Documentation Choose How to Install If you want to use Hugo as your site generator simply install the Hugo binaries The Hugo binaries have no external dependencies To contribute to the Hugo source code or documentation you should fork the Hugo GitHub projecthttpsgithubcomspf13hugoforkdestinationbox and clone it to your local machine Finally you can install the Hugo source code with go build the binaries yourself and run Hugo that way Building the binaries is an easy task for an experienced go getter Install Hugo as Your Site Generator Binary Install Use the installation instructions in the Hugo documentationhttpgohugoiooverviewinstalling Clone the Hugo Project Contributor 1 Make sure your local environment has the following software installed Githttpsgitscmcom Mercurialhttpswwwmercurialscmorg Go 14 2 Fork the Hugo project on GitHubhttpsgithubcomspf13hugo 3 Clone your fork git clone httpsgithubcomYOURNAMEhugo 4 Change into the hugo directory cd hugo 5 Install the Hugo projects package dependencies go get u v githubcomspf13hugo 6 Use a symbolic link to add your locally cloned Hugo repository to your GOPATH assuming you prefer doing development work outside of GOPATH bash rm rf GOPATHsrcgithubcomspf13hugo ln s pwd GOPATHsrcgithubcomspf13hugo Go expects all of your libraries to be found inGOPATH Build and Install the Binaries from Source Advanced Install Add Hugo and its package dependencies to your go src directory go get v githubcomspf13hugo Once the get completes you should find your new hugo or hugoexe executable sitting inside GOPATHbin To update Hugos dependencies use go get with the u option go get u v githubcomspf13hugo Contribute to Hugo We welcome contributions to Hugo of any kind including documentation themes organization tutorials blog posts bug reports issues feature requests feature implementation pull requests answering questions on the forum helping to manage issues etc The Hugo community and maintainers are very active and helpful and the project benefits greatly from this activity Throughput Graphhttpsgraphswaffleiospf13hugothroughputsvghttpswaffleiospf13hugometrics If you have any questions about how to contribute or what to contribute please ask on the forumhttpdiscussgohugoio Code Contribution Guideline We welcome your contributions To make the process as seamless as possible we ask for the following Go ahead and fork the project and make your changes We encourage pull requests to discuss code changes When youre ready to create a pull request be sure to Sign the CLAhttpsclaassistantiospf13hugo Have test cases for the new code If you have questions about how to do it please ask in your pull request Run go fmt Squash your commits into a single commit git rebase i Its okay to force update your pull request This blog articlehttpchrisbeamsiopostsgitcommit is a good resource for learning how to write good commit messages the most important part being that each commit message should have a titlesubject in imperative mood starting with a capital letter and no trailing period Return error on wrong use of the Paginator NOT returning some error Also if your commit references one or more GitHub issues always end your commit message body with See 1234 or Fixes 1234 Replace 1234 with the GitHub issue ID The last example will close the issue when the commit is merged into master Make sure go test passes and go build completes Our Travis CI loophttpstravisciorgspf13hugo Linux and AppVeyorhttpsciappveyorcomprojectspf13hugobranchmaster Windows will catch most things that are missing Build Hugo with Your Changes bash cd pathtohugo go build o hugo maingo mv hugo usrlocalbin Add Compile Information to Hugo To add compile information to Hugo replace the go build command with the following replace pathtohugo with the actual path go build ldflags X pathtohugohugolibCommitHash git revparse short HEAD 2devnull X githubcomspf13hugohugolibBuildDate date FTTz This will result in hugo version output that looks similar to Hugo Static Site Generator v013DEV8042E77 buildDate 20141225T0325570700 Alternatively just run make mdash all the magic above is already in the Makefile wink Run Hugo bash cd pathtohugo go install githubcomspf13hugohugolib go run maingo "},{"title":"keybind","tags":["keybind"],"href":"/2016/05/27/keybind","content":"Vim keyaction j k Ctrl CtrlEnter"}]
